{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "Contracts/GenerateRandomNumber.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.11;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n\r\ncontract GenerateRandomNumber is VRFConsumerBaseV2 {\r\n\r\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\r\n    uint256 private immutable i_entranceFees;\r\n    bytes32 private immutable i_keyHash;\r\n    uint64 private immutable i_subscriptionId;\r\n    uint16 private constant i_confirmations = 3;\r\n    uint32 private immutable i_callBackGasLimit;\r\n    uint32 private constant numWords = 1;\r\n    uint256 public index;\r\n    uint256[4] public array = [123,456,789,102];\r\n\r\n    constructor(\r\n        address vrfCoordinator, \r\n        uint256 entranceFees,\r\n        bytes32 keyHash,\r\n        uint64 subscriptioiniId,\r\n        uint32 callBackGasLimit\r\n\r\n        ) VRFConsumerBaseV2(vrfCoordinator){\r\n        i_entranceFees = entranceFees;\r\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\r\n        i_keyHash = keyHash;\r\n        i_subscriptionId = subscriptioiniId;\r\n        i_callBackGasLimit = callBackGasLimit;\r\n\r\n    }\r\n\r\n    function requestRandomWinner()external returns(uint256){\r\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\r\n            i_keyHash,\r\n            i_subscriptionId,\r\n            i_confirmations,\r\n            i_callBackGasLimit,\r\n            numWords\r\n        );\r\n        return requestId;\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) internal override{\r\n        index = randomWords[0] % array.length;\r\n    }\r\n\r\n    function showRandomNumber() public view returns(uint256){\r\n        return array[index];\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n"
    },
    "Contracts/minmax.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.8;\r\n\r\nlibrary minmax{\r\n    \r\n    function findMax(uint256 a, uint256 b, uint256 c, uint256 d) internal pure returns(uint256){\r\n        uint256 maximumNumber1 = 0;\r\n        uint256 maximumNumber2 = 0;\r\n        uint256 f_maximumNumber = 0;\r\n        \r\n\r\n        if(a > b){\r\n            maximumNumber1 = a;\r\n        } else{\r\n            maximumNumber1 = b;\r\n        }\r\n\r\n        if(c > d){\r\n            maximumNumber2 = c;\r\n        } else{\r\n            maximumNumber2 = d;\r\n        }\r\n\r\n        if(maximumNumber1 > maximumNumber2){\r\n            f_maximumNumber = maximumNumber1;\r\n        } else{\r\n            f_maximumNumber = maximumNumber2;\r\n        }\r\n\r\n        return f_maximumNumber;\r\n    }\r\n    \r\n    \r\n}"
    },
    "Contracts/vote.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.8;\r\nimport \"./minmax.sol\";\r\n\r\nerror vote__NonIndianError();\r\nerror vote__voteGivenAlready();\r\nerror vote__wrongWardNumberError();\r\nerror vote__VoterDetailsNotAddedError();\r\nerror vote__noReleventDataFoundError();\r\nerror vote__ZeroVotedError();\r\nerror vote__AlreadyVoteGivenError();\r\nerror vote__UnderagedVoterError();\r\nerror vote__NotElectionCommissonerError();\r\nerror vote__GoforLotteryError();\r\n\r\ncontract vote {\r\n    using minmax for uint256;\r\n    //1.Entre details ✅\r\n    //2.give vote ✅\r\n    //3.approve vote ✅\r\n    //4.store in the data structure ✅\r\n    //5.show statistics of the election✅\r\n    //6.in case of similar votes go for a lottery\r\n\r\n    struct VoterDetails{\r\n        string Name;\r\n        uint16 Age;\r\n        string Nationality;\r\n        uint256 Aadhar;\r\n        string Pan;\r\n        uint16 Ward;\r\n        bool voteGivenOrNot;\r\n    }\r\n\r\n    uint256 Amit_Shah = 0;\r\n    uint256 Rahul_Gandhi = 0;\r\n    uint256 Mamata_Banargee = 0;\r\n    uint256 Kejariwal = 0;\r\n    string Winner;\r\n\r\n    address private immutable i_owner;\r\n    mapping(address => VoterDetails) private s_voterDetails;\r\n    mapping(string => uint256) private s_voteToCandidate;\r\n    mapping(address => bool) private userExists;\r\n    address[] public s_totalVoters;\r\n    uint256 totalVotedCount = 0;\r\n    uint256 candidatesWithSimilarVote = 0; \r\n    string [4] private candidates = [\"Amit shah\",\"Rahul gandhi\",\"Mamata banargee\",\"Arvind Kejariwal\"];\r\n    string[] private similarVoteCount;\r\n\r\n    event VoterDetailsAdded(\r\n        address indexed voterAddress,\r\n        uint256 indexed AadharNumber,\r\n        string indexed PanNumber\r\n    );\r\n\r\n    event detailsUpdated(\r\n        address indexed voterAddress\r\n    );\r\n\r\n    modifier CheckAge(uint16 age){\r\n        if(age < 18){\r\n            revert vote__UnderagedVoterError();\r\n        }\r\n        _;\r\n        \r\n    }\r\n\r\n    modifier AlreadyVoteGiven(address voter){\r\n        if(s_voterDetails[voter].voteGivenOrNot == true){\r\n            revert vote__AlreadyVoteGivenError();\r\n        }\r\n        _;\r\n        \r\n    }\r\n\r\n    modifier _exists(address voter){\r\n        if(!userExists[voter]){\r\n            revert vote__VoterDetailsNotAddedError();\r\n        }\r\n        _;\r\n        \r\n    }\r\n\r\n    modifier OnlyElectionCommissioner(){\r\n        if(msg.sender != i_owner){\r\n            revert vote__NotElectionCommissonerError();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier _CheckVotedCount(){\r\n        if(totalVotedCount <= 0){\r\n            revert vote__ZeroVotedError();\r\n        } \r\n        _;\r\n        \r\n    }\r\n\r\n    constructor(address ElectionCommissioner){\r\n        i_owner = ElectionCommissioner;\r\n    }\r\n\r\n    function EntreDetails(\r\n        string memory name, \r\n        uint16 age,\r\n        string memory nationality,\r\n        uint256 aadhar,\r\n        string memory pan,\r\n        uint16 ward_no\r\n        \r\n        ) external CheckAge(age){\r\n\r\n        VoterDetails memory newVoter = VoterDetails({\r\n            Name: name,\r\n            Age: age,\r\n            Nationality: nationality,\r\n            Aadhar: aadhar,\r\n            Pan: pan,\r\n            Ward: ward_no,\r\n            voteGivenOrNot: false\r\n        });\r\n        s_voterDetails[msg.sender] = newVoter;\r\n        s_totalVoters.push(msg.sender);\r\n        userExists[msg.sender] = true;\r\n        emit VoterDetailsAdded(msg.sender,aadhar,pan);\r\n        \r\n    }\r\n\r\n    function updateDetails(\r\n        address voterAddress,\r\n        string memory name, \r\n        uint16 age,\r\n        string memory nationality,\r\n        uint256 aadhar,\r\n        string memory pan,\r\n        uint16 ward_no\r\n        ) external CheckAge(age) _exists(msg.sender){\r\n\r\n        delete s_voterDetails[voterAddress];\r\n\r\n        VoterDetails memory newlyVoter = VoterDetails({\r\n            Name: name,\r\n            Age: age,\r\n            Nationality: nationality,\r\n            Aadhar: aadhar,\r\n            Pan: pan,\r\n            Ward: ward_no,\r\n            voteGivenOrNot: false\r\n        });\r\n        s_voterDetails[voterAddress] = newlyVoter;\r\n        s_totalVoters.push(voterAddress);\r\n\r\n        emit detailsUpdated(msg.sender);\r\n    }\r\n\r\n    function giveVote(address voter, string memory candidate)external AlreadyVoteGiven(voter) _exists(voter){\r\n        //select the candidate from the given suggested names.\r\n        //e.g 1. Amit Shah 2. Rahhul Gandhi 3. Mamata Banargee 4. Arvind Kejariwal\r\n        s_voteToCandidate[candidate] += 1;\r\n        \r\n    }\r\n    function approveVote(address voter, uint256 aadhar)external{\r\n        VoterDetails memory vd2 = s_voterDetails[voter];\r\n\r\n        if(vd2.Aadhar != aadhar){\r\n            revert vote__noReleventDataFoundError();\r\n        }\r\n\r\n        if(vd2.voteGivenOrNot){\r\n            revert vote__voteGivenAlready();\r\n        }\r\n        \r\n        if(vd2.Ward > 200 && vd2.Ward < 100){\r\n            revert vote__wrongWardNumberError();\r\n        }\r\n\r\n        vd2.voteGivenOrNot = true;\r\n        delete s_voterDetails[msg.sender];\r\n        s_voterDetails[msg.sender] = vd2;\r\n        totalVotedCount ++;\r\n\r\n    }\r\n\r\n    // function TotalVoterAddresses() external view returns(address[] memory){\r\n    //     return s_totalVoters;\r\n    // }\r\n\r\n    function CandidateLottery() external pure returns(string memory){\r\n        return \"go for lottery\";\r\n    }\r\n\r\n    function CalculateWinnerCandidate() external OnlyElectionCommissioner() _CheckVotedCount() {\r\n\r\n        for(uint16 i=0; i<s_totalVoters.length; i++){\r\n            address voter1 = s_totalVoters[i];\r\n            if(s_voterDetails[voter1].voteGivenOrNot){\r\n                Amit_Shah = s_voteToCandidate[candidates[0]];\r\n                Rahul_Gandhi = s_voteToCandidate[candidates[1]];\r\n                Mamata_Banargee = s_voteToCandidate[candidates[2]];\r\n                Kejariwal = s_voteToCandidate[candidates[3]];\r\n            }\r\n        }\r\n\r\n        uint256 MaximumVoteofBallot = minmax.findMax(Amit_Shah, Rahul_Gandhi, Mamata_Banargee, Kejariwal);\r\n        \r\n        for(uint16 i = 0; i<4; i++){\r\n            if(s_voteToCandidate[candidates[i]] == MaximumVoteofBallot ){\r\n                Winner = candidates[i];\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //All view or pure functions\r\n\r\n    function showTotalVotedCount() external view returns(uint256){\r\n        return totalVotedCount;\r\n    }\r\n\r\n    function showMyDetails(address voter) _exists(voter) external view returns(VoterDetails memory){\r\n        VoterDetails memory myDetails = s_voterDetails[voter];\r\n        return myDetails;\r\n    }\r\n\r\n    function totalNonVotedCount() external view returns(uint256){\r\n        uint256 nonVotedVoters = s_totalVoters.length - totalVotedCount;\r\n        return nonVotedVoters;\r\n    }\r\n\r\n    function showWinner() _CheckVotedCount() external view returns(string memory){\r\n        return Winner;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}